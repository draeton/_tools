<?xml version="1.0" encoding="utf-8"?>
<project>

    <property name="apps.home" value="${env.APPS_HOME}"/>

    <property name="src.dir" value="${basedir}/src"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="docs.dir" value="${basedir}/docs"/>
    <property name="templates.dir" value="${basedir}/_templates"/>
    <property name="tests.dir" value="${basedir}/tests"/>

    <property name="jshint.jar" value="${apps.home}/ant-jshint/ant-jshint-0.3.4-deps.jar"/>
    <property name="jstest.jar" value="${apps.home}/ant-jstestrunner/ant-jstestrunner-0.1-deps.jar"/>
    <property name="docco.bat" value="${apps.home}/nodejs/docco.bat"/>
    <property name="yui-compressor.jar" value="${apps.home}/yuicompressor-2.4.7/build/yuicompressor-2.4.7.jar"/>
    <property name="yui-compressor-ant-task.jar" value="${apps.home}/yui-compressor-ant-task-0.5/bin/yui-compressor-ant-task-0.5.jar"/>
    <property name="phantomjs.win.exe" value="${apps.home}/phantom/win/phantomjs.exe"/>
    <property name="phantomjs.mac.exe" value="${apps.home}/phantom/mac/phantomjs.exe"/>
    <property name="phantomjs.linux.exe" value="${apps.home}/phantom/linux/phantomjs.exe"/>


    <macrodef name="git">
        <attribute name="command"/>
        <attribute name="failonerror" default="true"/>
        <attribute name="dir" default=""/>
        <element name="args" optional="true"/>
        <sequential>
            <echo message="git @{command}"/>
            <exec executable="git" dir="@{dir}">
                <arg line="@{command}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>


    <target name="-load.properties" description="Load properties for this build">
        <echo>Load properties for this build</echo>

        <property file="build.properties"/>
        <property name="gh-pages.dir" value="../gh-pages/${repo}"/>
        <property name="version" value="${build.major}.${build.minor}.${build.number}"/>
    </target>


    <target name="-clean" depends="-load.properties" description="Make project directory structure">
        <echo>Make project directory structure</echo>

        <delete dir="${build.dir}"/>
        <delete dir="${docs.dir}"/>

        <mkdir dir="${build.dir}"/>
        <mkdir dir="${docs.dir}"/>

        <copy file="../_tools/github/img/passing.png" tofile="${basedir}/status.png" overwrite="true"/>
    </target>


    <target name="jshint" description="JSHint validation">
        <echo>JSHint validation</echo>

        <taskdef name="jshint" classname="com.philmander.jshint.JsHintAntTask" classpath="${jshint.jar}" />

        <jshint dir="${src.dir}" optionsFile="${basedir}/jshint.properties" fail="false">
            <include name="**/*.js"/>
            <exclude name="lib/**/*.js"/>
            <report type="plain" destFile="${basedir}/jshint.out" />
        </jshint>

        <condition property="jshint.fail">
            <resourcecount when="greater" count="0">
                <fileset file="${basedir}/jshint.out">
                    <contains text="errors" casesensitive="yes"/>
                </fileset>
            </resourcecount>
        </condition>

        <echo>Finished linting</echo>
    </target>


    <target name="jstest" description="Run JS unit tests">
        <echo>Run JS unit tests</echo>

        <taskdef name="jstest" classname="com.philmander.jstest.ant.JsTestRunnerTask" classpath="${jstest.jar}" />

        <jstest dir="${tests.dir}" phantomWin="${phantomjs.win.exe}" phantomMac="${phantomjs.mac.exe}" phantomLinux="${phantomjs.linux.exe}" fail="false">
            <include name="**/*.html"/>
            <report type="plain" destFile="${basedir}/jstest.out" />
        </jstest>

        <condition property="jstest.fail">
            <resourcecount when="greater" count="0">
                <fileset file="${basedir}/jstest.out">
                    <contains text="JS tests failed" casesensitive="yes"/>
                </fileset>
            </resourcecount>
        </condition>

        <echo>Finished unit tests</echo>
    </target>


    <target name="-check-jshint" description="Runs if jshint fails" depends="jshint" if="jshint.fail">
        <copy file="../_tools/github/img/failing.png" tofile="${basedir}/status.png" overwrite="true"/>
    </target>


    <target name="-check-jstest" description="Runs if jstest fails" depends="jstest" if="jstest.fail">
        <copy file="../_tools/github/img/failing.png" tofile="${basedir}/status.png" overwrite="true"/>
    </target>


    <target name="-check-status" description="Check lint and unit test status" depends="-check-jshint,-check-jstest"/>


    <target name="-readme" depends="-load.properties" description="Updating version number in README">
        <echo>Updating version number in README.md</echo>

        <delete file="README.md"/>
        <copy file="${templates.dir}/README.md" tofile="README.md"/>
        <replace file="README.md" token="@VERSION@" value="${version}"/>
    </target>


    <target name="-docco" depends="-init" description="Create docs using Docco">
        <echo>Create docs using Docco</echo>

        <pathconvert pathsep=" " property="docco.args" refid="src.js"/>
        <exec executable="${docco.bat}">
            <arg line="${docco.args}"/>
        </exec>

        <!-- clean up after docco -->
        <delete dir="-p"/>
    </target>


    <target name="-concat" depends="-init" description="Concatenation of JS and CSS">
        <echo>Concatenation of JS and CSS</echo>

        <concat destfile="${build.dir}/js/${repo}-${version}.js" force="no">
            <filelist refid="src.js"/>
        </concat>
        <concat destfile="${build.dir}/css/${repo}-${version}.css" force="no">
            <filelist refid="src.css"/>
        </concat>
    </target>


    <target name="-minify" depends="-concat" description="Invoke YUI compressor">
        <echo>Invoke YUI compressor</echo>

        <path id="task.classpath">
            <pathelement location="${yui-compressor.jar}"/>
            <pathelement location="${yui-compressor-ant-task.jar}"/>
        </path>
        <taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
            <classpath refid="task.classpath"/>
        </taskdef>

        <yui-compressor warn="false" charset="UTF-8" fromdir="${build.dir}" todir="${build.dir}">
           <include name="js/${repo}-${version}.js" />
           <include name="css/${repo}-${version}.css" />
        </yui-compressor>
    </target>


    <target name="-src-lib-exists" depends="-init" description="Check if src/lib exists">
        <echo>Check if src/lib exists</echo>

        <available file="${src.dir}/lib" type="dir" property="src.lib.exists" />
    </target>


    <target name="-copy-depends" depends="-init,-src-lib-exists" description="Copy dependencies" if="src.lib.exists">
        <echo>Copy dependencies</echo>

        <copy todir="${build.dir}/js">
            <fileset dir="${src.dir}/lib"/>
        </copy>
    </target>


    <target name="-zip" depends="-init" description="Create a zip file for distribution">
        <echo message="Create a zip file for distribution" />

        <zip destfile="${dist.dir}/${repo}-${version}.zip" basedir="${build.dir}" />
    </target>


    <target name="-commit.message" description="Set commit message">
        <echo>Set commit message</echo>

        <input message="Please enter a commit message:" addproperty="commit.message"/>
    </target>


    <target name="-commit" depends="-commit.message" description="Commit new build to master git repo">
        <echo>Commit new build to master git repo</echo>

        <git command="add">
            <args><arg line="."/></args>
        </git>
        <git command="commit">
            <args><arg value="-am Build ${version} - ${commit.message}"/></args>
        </git>
        <git command="push">
            <args>
                <arg value="origin"/>
                <arg value="master"/>
            </args>
        </git>
    </target>


    <target name="-increment" description="Increment build number">
        <echo>Increment build number</echo>

        <propertyfile file="build.properties">
            <entry key="build.number" type="int" operation="+" default="0"/>
        </propertyfile>
    </target>


    <target name="-gh-pages-update" depends="-load.properties" description="Make new changes to gh-pages">
        <echo>Make new changes to gh-pages</echo>

        <echo>copy new index.md to gh-pages and update version number</echo>
        <delete file="${gh-pages.dir}/index.md"/>
        <copy file="${gh-pages.dir}/_templates/index.md" tofile="${gh-pages.dir}/index.md"/>
        <replace file="${gh-pages.dir}/index.md" token="@VERSION@" value="${version}"/>
    </target>


    <target name="-gh-pages-commit" depends="-load.properties" description="Update gh-pages repo master copy to latest version">
        <echo>Update gh-pages repo master copy to latest version</echo>

        <!-- copy master -->
        <delete dir="${gh-pages.dir}/${repo}"/>
        <copy todir="${gh-pages.dir}/${repo}">
            <fileset dir="${basedir}" includes="**"/>
        </copy>

        <!-- commit -->
        <git command="add" dir="${gh-pages.dir}">
            <args><arg line="."/></args>
        </git>
        <git command="commit" dir="${gh-pages.dir}">
            <args><arg value="-am Copied files from master branch"/></args>
        </git>

        <!-- push -->
        <git command="push" dir="${gh-pages.dir}">
            <args>
                <arg value="origin"/>
                <arg value="gh-pages"/>
            </args>
        </git>
    </target>

</project>