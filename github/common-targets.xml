<?xml version="1.0" encoding="utf-8"?>
<project>


    <target name="-clean">
        <echo>Make project directory structure</echo>

        <delete dir="${amd.dir}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${docs.dir}"/>
        <delete dir="${out.dir}"/>

        <mkdir dir="${amd.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${docs.dir}"/>
        <mkdir dir="${out.dir}"/>
    </target>


    <!--

        VALIDATION

    -->

    <target name="jshint">
        <echo>Linting</echo>

        <taskdef name="jshint" classname="com.philmander.jshint.JsHintAntTask" classpath="${jshint.jar}" />

        <jshint dir="${src.dir}" optionsFile="./jshint.properties" fail="false">
            <include name="**/*.js"/>
            <exclude name="js/text.js"/>
            <exclude name="require.js"/>
            <report type="plain" destFile="${out.dir}/jshint.out" />
        </jshint>

        <condition property="jshint.fail">
            <resourcecount when="greater" count="0">
                <fileset file="${out.dir}/jshint.out">
                    <contains text="JSHint validation failed" casesensitive="yes"/>
                </fileset>
            </resourcecount>
        </condition>
    </target>


    <target name="jstest">
        <echo>Unit tests</echo>

        <taskdef name="jstest" classname="com.philmander.jstest.ant.JsTestRunnerTask" classpath="${jstest.jar}" />

        <jstest dir="${tests.dir}" phantomWin="${phantomjs.win.exe}" phantomMac="${phantomjs.mac.exe}" phantomLinux="${phantomjs.linux.exe}" fail="false">
            <include name="**/*.html"/>
            <report type="plain" destFile="${out.dir}/jstest.out" />
        </jstest>

        <condition property="jstest.fail">
            <resourcecount when="greater" count="0">
                <fileset file="${out.dir}/jstest.out">
                    <contains text="JS tests failed" casesensitive="yes"/>
                </fileset>
            </resourcecount>
        </condition>
    </target>


    <target name="-check-start">
        <echo>Reset project status</echo>
        <copy file="${passing.png}" tofile="${out.dir}/status.png" overwrite="true"/>
    </target>


    <target name="-check-jshint" depends="jshint" if="jshint.fail">
        <echo>Runs if jshint fails</echo>
        <copy file="${failing.png}" tofile="${out.dir}/status.png" overwrite="true"/>
    </target>


    <target name="-check-jstest" depends="jstest" if="jstest.fail">
        <echo>Runs if jstest fails</echo>
        <copy file="${failing.png}" tofile="${out.dir}/status.png" overwrite="true"/>
    </target>


    <target name="validate" depends="-check-start,-check-jshint,-check-jstest">
        <echo>Check lint and unit test status</echo>
    </target>


    <!--

        DOCUMENTATION

    -->


    <target name="-readme">
        <echo>Updating version number in README.md</echo>

        <delete file="README.md"/>
        <copy file="${templates.dir}/README.md" tofile="README.md"/>
        <replace file="README.md" token="@VERSION@" value="${version}"/>
    </target>


    <target name="docco" depends="-init,-clean">
        <echo>Create docs using Docco</echo>

        <fileset id="docs.js" dir="${src.dir}/js">
            <include name="**/*.js"/>
            <exclude name="text.js"/>
        </fileset>

        <pathconvert pathsep=" " property="docco.args" refid="docs.js"/>
        <exec executable="${docco.bat}">
            <arg line="${docco.args}"/>
        </exec>

        <!-- clean up after docco -->
        <delete dir="-p"/>
    </target>


    <target name="docker" depends="-init,-clean">
        <echo>Create docs using Docker</echo>

        <exec executable="${docker.bat}">
            <arg line="-i ${src.dir}/js"/>
            <arg line="-o ${docs.dir}"/>
            <arg line="--exclude text.js"/>
            <arg line="--extras fileSearch"/>
        </exec>
    </target>


    <!--

        OPTIMIZATION

    -->

    <target name="require" depends="-clean">
        <echo>Optimize scripts with r.js and closure compiler</echo>

        <java classname="org.mozilla.javascript.tools.shell.Main" failonerror="true">
            <classpath>
                <pathelement location="${rhino.jar}" />
                <pathelement location="${closure.jar}" />
            </classpath>
            <arg value="${r.js}" />
            <arg value="-o" />
            <arg value="./app.build.js" />
        </java>
    </target>


    <target name="-concat" depends="require">
        <echo>Concatenation of JS and CSS</echo>

        <concat destfile="${build.dir}/${repo}/js/${repo}-${version}.js" force="no">
            <filelist dir="${amd.dir}">
                <file name="require.js"/>
                <file name="js/${repo}.js"/>
            </filelist>
        </concat>

        <concat destfile="${build.dir}/${repo}/css/${repo}-${version}.css" force="no">
            <filelist dir="${amd.dir}/css">
                <file name="${repo}.css"/>
            </filelist>
        </concat>
    </target>


    <target name="-minify" depends="-concat">
        <echo>Invoke YUI compressor</echo>

        <path id="task.classpath">
            <pathelement location="${yui-compressor.jar}"/>
            <pathelement location="${yui-compressor-ant-task.jar}"/>
        </path>

        <taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
            <classpath refid="task.classpath"/>
        </taskdef>

        <yui-compressor warn="false" charset="UTF-8" fromdir="${build.dir}" todir="${build.dir}">
           <include name="${repo}/js/${repo}-${version}.js" />
           <include name="${repo}/css/${repo}-${version}.css" />
        </yui-compressor>
    </target>


    <!--

        DISTRIBUTION

    -->


    <target name="-copy-depends" depends="-init,-clean" description="Copying dependencies">
        <echo>Copying dependencies</echo>

        <copy todir="${build.dir}/${repo}">
            <fileset refid="repo.depends"/>
        </copy>

        <copy todir="${build.dir}/lib">
            <fileset dir="${lib.dir}"/>
        </copy>
    </target>


    <target name="-zip">
        <echo>Create a zip file for distribution</echo>

        <property name="dist.zip" value="${dist.dir}/${repo}-${version}.zip"/>
        <zip destfile="${dist.zip}" basedir="${build.dir}"/>
    </target>


    <!--

        GIT

    -->

    <macrodef name="git">
        <attribute name="command"/>
        <attribute name="failonerror" default="true"/>
        <attribute name="dir" default=""/>
        <element name="args" optional="true"/>
        <sequential>
            <echo message="git @{command}"/>
            <exec executable="git" dir="@{dir}">
                <arg line="@{command}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>


    <target name="-commit-message">
        <echo>Set commit message</echo>

        <input message="Please enter a commit message:" addproperty="commit.message"/>
    </target>


    <target name="commit" depends="-commit-message">
        <echo>Commit new build to master git repo</echo>

        <git command="add">
            <args><arg line="."/></args>
        </git>

        <git command="commit">
            <args><arg value="-am Build ${version} - ${commit.message}"/></args>
        </git>

        <git command="push">
            <args>
                <arg value="origin"/>
                <arg value="master"/>
            </args>
        </git>
    </target>


    <!--

        GITHUB PAGES

    -->

    <target name="-gh-pages-update">
        <echo>Make new changes to gh-pages</echo>

        <echo>copy new index.md to gh-pages and update version number</echo>
        <delete file="${gh-pages.dir}/index.md"/>
        <copy file="${gh-pages.dir}/_templates/index.md" tofile="${gh-pages.dir}/index.md"/>
        <replace file="${gh-pages.dir}/index.md" token="@VERSION@" value="${version}"/>
    </target>


    <target name="-gh-pages-commit">
        <echo>Update gh-pages repo master copy to latest version</echo>

        <!-- copy master -->
        <delete dir="${gh-pages.dir}/repo"/>

        <copy todir="${gh-pages.dir}/repo/build">
            <fileset dir="${build.dir}"/>
        </copy>
        <copy todir="${gh-pages.dir}/repo/dist">
            <fileset dir="${dist.dir}"/>
        </copy>
        <copy todir="${gh-pages.dir}/repo/docs">
            <fileset dir="${docs.dir}"/>
        </copy>
        <copy todir="${gh-pages.dir}/repo/tests">
            <fileset dir="${tests.dir}"/>
        </copy>

        <!-- commit -->
        <git command="add" dir="${gh-pages.dir}">
            <args><arg line="."/></args>
        </git>
        <git command="commit" dir="${gh-pages.dir}">
            <args><arg value="-am Copied files from master branch"/></args>
        </git>

        <!-- push -->
        <git command="push" dir="${gh-pages.dir}">
            <args>
                <arg value="origin"/>
                <arg value="gh-pages"/>
            </args>
        </git>
    </target>


    <!--

        REVISIONS

    -->


    <target name="major">
        <echo>Increment build.major</echo>

        <propertyfile file="build.properties">
            <entry key="build.major" type="int" operation="+" default="0"/>
            <entry key="build.minor" type="int" operation="=" default="0" value="0"/>
            <entry key="build.revision" type="int" operation="=" default="0" value="0"/>
        </propertyfile>
    </target>


    <target name="minor">
        <echo>Increment build.minor</echo>

        <propertyfile file="build.properties">
            <entry key="build.major" type="int" operation="=" default="0"/>
            <entry key="build.minor" type="int" operation="+" default="0"/>
            <entry key="build.revision" type="int" operation="=" default="0" value="0"/>
        </propertyfile>
    </target>


    <target name="revision">
        <echo>Increment build revision</echo>

        <propertyfile file="build.properties">
            <entry key="build.major" type="int" operation="=" default="0"/>
            <entry key="build.minor" type="int" operation="=" default="0"/>
            <entry key="build.revision" type="int" operation="+" default="0"/>
        </propertyfile>
    </target>


</project>